# Subfinder for passive
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest

# DNSx for fast brute-force
go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest





Step 1 — Project Setup
Goal: Create the folder structure + empty files + virtual environment.

Create the main folder & subfolders
Since you’re on Windows (PowerShell), run:

powershell
Copy
Edit
mkdir Subdomain_Enumeration
cd Subdomain_Enumeration
mkdir wordlists, reports, history
ni main.py, passive_enum.py, active_enum.py, stream_output.py, tech_fingerprint.py, threat_enrich.py, change_detect.py, report_generator.py, utils.py, requirements.txt
ni = short for New-Item (PowerShell’s way to create files).

Create and activate virtual environment

powershell
Copy
Edit
python -m venv venv
.\venv\Scripts\activate
Step 2 — Install Core Python Dependencies
(We’ll add more later as needed)

powershell
Copy
Edit
pip install requests aiohttp dnspython beautifulsoup4 builtwith jinja2 reportlab
We’ll also later install:

shodan

censys

subfinder & dnsx (via Go)

Step 3 — Start with Passive Enumeration
Why?

Passive is faster, no interaction with target → fewer legal concerns.

We can immediately see results from APIs like crt.sh, alienvault, etc.

We’ll build passive_enum.py to:

Take a domain

Query multiple public APIs

Return found subdomains

Step 4 — Add Real-Time Output
We’ll implement stream_output.py so subdomains show up instantly instead of waiting for scan completion.

Step 5 — Add Active Enumeration
This is where brute-forcing + permutations happen (active_enum.py), optionally using dnsx.

Step 6 — Enrichment + Fingerprinting
Add:

tech_fingerprint.py (builtwith/Wappalyzer)

threat_enrich.py (Shodan, Censys, PassiveDNS)

Step 7 — Change Detection & Reporting
change_detect.py → Compare current scan with history.

report_generator.py → Export HTML/PDF.
